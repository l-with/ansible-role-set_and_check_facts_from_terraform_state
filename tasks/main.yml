---

- name: Ensure terraform init
  ansible.builtin.command:
    cmd: "{{ set_and_check_facts_from_terraform_state_terraform_command }} init"
    creates: .terraform/terraform.tfstate
  delegate_to: localhost

- name: Ensure terraform state loaded
  ansible.builtin.command:
    cmd: "{{ set_and_check_facts_from_terraform_state_terraform_command }} show -json"
  register: _terraform_state_output
  changed_when: false
  delegate_to: localhost

- name: Set fact _terraform_state
  ansible.builtin.set_fact:
    _terraform_state: "{{ _terraform_state_output.stdout }}"
  delegate_to: localhost

- name: Print _terraform_state
  ansible.builtin.debug:
    msg: "_terraform_state {{ _terraform_state }}"
  delegate_to: localhost
  when: set_and_check_facts_from_terraform_state_debug

- name: echo TF_STATE_NANE  
  ansible.builtin.shell:
    cmd: echo $TF_STATE_NAME
  register: _tf_state_name
  delegate_to: localhost
  when: set_and_check_facts_from_terraform_state_debug

- name: Print _tf_state_name
  ansibe.builtin.debug:
    msg: "_tf_state_name: {{ _tf_state_name.stdout }}"
  delegate_to: localhost
  when: set_and_check_facts_from_terraform_state_debug

- name: Ensure lookup required variables
  ansible.builtin.set_fact: { 
    "{{ item }}": "{{ _terraform_state 
      | community.general.json_query('values.outputs.'+item+'.value')
    }}" 
  }
  loop: "{{ set_and_check_facts_from_terraform_state_required_vars }}"
  delegate_to: localhost

- name: Check required variables
  ansible.builtin.fail:
    msg: Variable '{{ item }}' is not set
  when: not lookup('vars', item)
  with_items: "{{ set_and_check_facts_from_terraform_state_required_vars 
    | difference(set_and_check_facts_from_terraform_state_non_required_vars)
  }}"


...